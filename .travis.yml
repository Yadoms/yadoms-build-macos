os: osx
osx_image: xcode9.3
language: cpp

#limit to git depth to 1 because don't use any git command in this script
git:
  depth: 1
  
before_install:
# deps
- echo 'Installing some dependencies'
#do not call brew update (this may fail) => recommandation from docs
- if [ ${BREW_UPDATE} = true ]; then brew update >/dev/null; fi

script:

#dont install pcre because already installed
- brew install swig gammu >/dev/null

# Install sshpass to upload generated packages
- brew install https://raw.githubusercontent.com/kadwanev/bigboybrew/master/Library/Formula/sshpass.rb

#make dir
- mkdir -p $HOME/depsBuild
- mkdir -p $HOME/logs

#CMake
- echo 'Installing CMake 3.9.2'
- if [ ${GENERATE_CMAKE} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/cmake-3.9.2-build.tar.bz2; else wget --no-verbose --no-check-certificate https://cmake.org/files/v3.9/cmake-3.9.2.tar.gz; fi
- if [ ${GENERATE_CMAKE} != true ]; then tar jxf cmake-3.9.2-build.tar.bz2; else tar zxf cmake-3.9.2.tar.gz; fi
- cd cmake-3.9.2
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/bootstrap" ; else ./bootstrap > $HOME/logs/yadoms_cmake.log; fi
- if [ ${GENERATE_CMAKE} != true ]; then echo "Bypass CMake/make"; else make > $HOME/logs/yadoms_cmake.log; fi
- sudo make install > $HOME/logs/yadoms_cmake.log
- cd ..
- if [ ${GENERATE_CMAKE} = true ]; then tar cjf cmake-3.9.2-build.tar.bz2 cmake-3.9.2; fi
- if [ ${GENERATE_CMAKE} = true ]; then curl --ftp-create-dirs -T cmake-3.9.2-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_CMAKE} = true ]; then rm -f cmake-3.9.2-build.tar.bz2; fi

# boost
- echo 'Building Boost 1.65.1'
- if [ ${GENERATE_BOOST} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/boost_1_65_1-build.tar.bz2; else wget --no-verbose http://netcologne.dl.sourceforge.net/project/boost/boost/1.65.1/boost_1_65_1.tar.bz2; fi
- if [ ${GENERATE_BOOST} != true ]; then tar xjf boost_1_65_1-build.tar.bz2; else tar xjf boost_1_65_1.tar.bz2; fi
- cd boost_1_65_1
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/bootstrap"; else ./bootstrap.sh > $HOME/logs/yadoms_boost.log; fi
- if [ ${GENERATE_BOOST} != true ]; then echo "Bypass boost/b2"; else ./b2 --with-atomic --with-chrono --with-date_time --with-filesystem --with-regex --with-thread --with-system link=static runtime-link=static toolset=clang cxxflags="-stdlib=libc++ -fPIC" linkflags="-stdlib=libc++"  > $HOME/logs/yadoms_boost.log; fi
- cd ..
- if [ ${GENERATE_BOOST} = true ]; then tar cjf boost_1_65_1-build.tar.bz2 boost_1_65_1; fi
- if [ ${GENERATE_BOOST} = true ]; then curl --ftp-create-dirs -T boost_1_65_1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_BOOST} = true ]; then rm -f boost_1_65_1-build.tar.bz2; fi
  
 # openssl
- echo 'Building OpenSSL'
- if [ ${GENERATE_OPENSSL} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/openssl-1.0.2k-build.tar.bz2; else wget --no-verbose https://www.openssl.org/source/openssl-1.0.2k.tar.gz; fi
- if [ ${GENERATE_OPENSSL} != true ]; then tar xjf openssl-1.0.2k-build.tar.bz2; else tar xzf openssl-1.0.2k.tar.gz; fi
- cd openssl-1.0.2k
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/configure"; else ./Configure --prefix=$HOME/depsBuild/openssl darwin64-x86_64-cc > $HOME/logs/yadoms_openssl.log; fi
- if [ ${GENERATE_OPENSSL} != true ]; then echo "Bypass OpenSSL/make"; else make > $HOME/logs/yadoms_openssl.log; fi
- make install > $HOME/logs/yadoms_openssl.log
- cd ..
- if [ ${GENERATE_OPENSSL} = true ]; then tar cjf openssl-1.0.2k-build.tar.bz2 openssl-1.0.2k; fi
- if [ ${GENERATE_OPENSSL} = true ]; then curl --ftp-create-dirs -T openssl-1.0.2k-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_OPENSSL} = true ]; then rm -f openssl-1.0.2k-build.tar.bz2; fi

# poco
- echo 'Building Poco 1.7.9-all'
- if [ ${GENERATE_POCO} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/poco-1.7.9-all-build.tar.bz2; else wget --no-verbose http://pocoproject.org/releases/poco-1.7.9/poco-1.7.9-all.tar.gz; fi
- if [ ${GENERATE_POCO} != true ]; then tar xjf poco-1.7.9-all-build.tar.bz2; else tar xzf poco-1.7.9-all.tar.gz; fi
- cd poco-1.7.9-all/
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CC = -fPIC' >> build/config/Darwin64-clang-libc++; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure_config_file"; else echo 'STATICOPT_CXX = -fPIC' >> build/config/Darwin64-clang-libc++; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/configure"; else ./configure --static --config=Darwin64-clang-libc++ --no-samples --no-tests --omit=CppUnit,CppUnit/WinTestRunner,Data,Data/SQLite,Data/ODBCData/MySQL,MongoDB,PageCompiler,PageCompiler/File2Page --include-path=$HOME/depsBuild/openssl/include --library-path=$HOME/depsBuild/openssl/lib> $HOME/logs/yadoms_poco.log; fi
- if [ ${GENERATE_POCO} != true ]; then echo "Bypass poco/make"; else make > $HOME/logs/yadoms_poco.log; fi
- cd ..
- if [ ${GENERATE_POCO} = true ]; then tar cjf poco-1.7.9-all-build.tar.bz2 poco-1.7.9-all; fi
- if [ ${GENERATE_POCO} = true ]; then curl --ftp-create-dirs -T poco-1.7.9-all-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_POCO} = true ]; then rm -f poco-1.7.9-all-build.tar.bz2; fi


# protobuf
- echo 'Building Protobuf 3.4.1'
- if [ ${GENERATE_PROTOBUF} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/protobuf-3.4.1-build.tar.bz2; else wget --no-verbose https://github.com/google/protobuf/releases/download/v3.4.1/protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then tar xjf protobuf-3.4.1-build.tar.bz2 -C $HOME/depsBuild; else tar xzf protobuf-cpp-3.4.1.tar.gz; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd"; else cd protobuf-3.4.1; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/autogen"; else ./autogen.sh > $HOME/logs/yadoms_protobuf.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/configure"; else ./configure --enable-shared=no --prefix=$HOME/depsBuild/protobuf --with-pic > $HOME/logs/yadoms_protobuf.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make"; else make > $HOME/logs/yadoms_protobuf.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/make install"; else make install > $HOME/logs/yadoms_protobuf.log; fi
- if [ ${GENERATE_PROTOBUF} != true ]; then echo "Bypass protobuf/cd.."; else cd ..; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then tar cjf protobuf-3.4.1-build.tar.bz2 -C $HOME/depsBuild protobuf; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then curl --ftp-create-dirs -T protobuf-3.4.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_PROTOBUF} = true ]; then rm -f protobuf-3.4.1-build.tar.bz2; fi

# gammu
# - echo 'Building Gammu 1.38.1'
# - sudo apt-get install pkg-config libmysqlclient-dev libpq-dev libcurl4-gnutls-dev libusb-1.0-0-dev libdbi0-dev libbluetooth-dev libgudev-1.0-dev libglib2.0-dev unixodbc-dev
# - if [ ${GENERATE_GAMMU} != true ]; then wget --no-verbose -U 'Mozilla/5.0' http://yadoms.com/travis_build/static/gammu-1.38.1-build.tar.bz2; else wget --no-verbose http://dl.cihar.com/gammu/releases/gammu-1.38.1.tar.gz; fi
# - if [ ${GENERATE_GAMMU} != true ]; then tar xjf gammu-1.38.1-build.tar.bz2; else tar zxf gammu-1.38.1.tar.gz; fi
# - cd gammu-1.38.1
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass mkdir build"; else mkdir build; fi
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd build"; else cd build; fi
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cmake"; else cmake -DBUILD_SHARED_LIBS=OFF .. > yadoms_gammu.log; fi
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass make"; else make > yadoms_gammu.log; fi
# - if [ ${GENERATE_GAMMU} != true ]; then echo "Bypass cd .."; else cd ..; fi
# - cd ..
# - if [ ${GENERATE_GAMMU} = true ]; then tar cjf gammu-1.38.1-build.tar.bz2 gammu-1.38.1; fi
# - if [ ${GENERATE_GAMMU} = true ]; then curl --ftp-create-dirs -T gammu-1.38.1-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
# - if [ ${GENERATE_GAMMU} = true ]; then rm -f gammu-1.38.1-build.tar.bz2; fi

# PCRE
#- echo 'Installing PRCE'
#- sudo apt-get install libpcre3 libpcre3-dev

 # SWIG
# - echo 'Building SWIG'
# - if [ ${GENERATE_SWIG} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/swig-3.0.12-build.tar.bz2; else wget --no-verbose http://prdownloads.sourceforge.net/swig/swig-3.0.12.tar.gz; fi
# - if [ ${GENERATE_SWIG} != true ]; then tar xjf swig-3.0.12-build.tar.bz2; else tar xzf swig-3.0.12.tar.gz; fi
# - cd swig-3.0.12
# - if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/configure"; else ./configure > $HOME/logs/yadoms_swig.log; fi
# - if [ ${GENERATE_SWIG} != true ]; then echo "Bypass SWIG/make"; else make > $HOME/logs/yadoms_swig.log; fi
# - sudo make install > $HOME/logs/yadoms_swig.log
# - cd ..
# - if [ ${GENERATE_SWIG} = true ]; then tar cjf swig-3.0.12-build.tar.bz2 swig-3.0.12; fi
# - if [ ${GENERATE_SWIG} = true ]; then curl --ftp-create-dirs -T swig-3.0.12-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
# - if [ ${GENERATE_SWIG} = true ]; then rm -f swig-3.0.12-build.tar.bz2; fi

# Python
# - sudo apt-get install python-dev
#- echo 'Building Python'
#- if [ ${GENERATE_PYTHON} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/Python-2.7.13-build.tar.bz2; else wget --no-verbose https://www.python.org/ftp/python/2.7.13/Python-2.7.13.tgz; fi
#- if [ ${GENERATE_PYTHON} != true ]; then tar xjf Python-2.7.13-build.tar.bz2; else tar xzf Python-2.7.13.tgz; fi
#- cd Python-2.7.13
#- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON/configure"; else ./configure --enable-shared --with-system-expat > $HOME/logs/yadoms_python.log; fi
#- if [ ${GENERATE_PYTHON} != true ]; then echo "Bypass PYTHON/make"; else make > $HOME/logs/yadoms_python.log; fi
#- sudo make install > $HOME/logs/yadoms_python.log
#- cd ..
#- if [ ${GENERATE_PYTHON} = true ]; then tar cjf Python-2.7.13-build.tar.bz2 Python-2.7.13; fi
#- if [ ${GENERATE_PYTHON} = true ]; then curl --ftp-create-dirs -T Python-2.7.13-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
#- if [ ${GENERATE_PYTHON} = true ]; then rm -f Python-2.7.13-build.tar.bz2; fi

# PostgreSQL
- echo 'Building PostgreSQL'
- if [ ${GENERATE_POSTGRESQL} != true ]; then wget --no-verbose -U 'Yadoms/1.0.0' ${YADOMS_DOWNLOAD_URL}/postgresql-9.6.2-build.tar.bz2; else wget --no-verbose https://ftp.postgresql.org/pub/source/v9.6.2/postgresql-9.6.2.tar.bz2; fi
- if [ ${GENERATE_POSTGRESQL} != true ]; then tar xjf postgresql-9.6.2-build.tar.bz2; else tar xjf postgresql-9.6.2.tar.bz2; fi
- cd postgresql-9.6.2
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/configure"; else ./configure > $HOME/logs/yadoms_postgresql.log; fi
- cd src/interfaces/libpq
- if [ ${GENERATE_POSTGRESQL} != true ]; then echo "Bypass PostgreSQL/make"; else make > $HOME/logs/yadoms_postgresql.log; fi
- cd ../../../..
- if [ ${GENERATE_POSTGRESQL} = true ]; then tar cjf postgresql-9.6.2-build.tar.bz2 postgresql-9.6.2; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then curl --ftp-create-dirs -T postgresql-9.6.2-build.tar.bz2 -u $FTP_USER:$FTP_PASSWORD ${YADOMS_UPLOAD_URL}; fi
- if [ ${GENERATE_POSTGRESQL} = true ]; then rm -f postgresql-9.6.2-build.tar.bz2; fi

#Yadoms sources
- echo 'Downloading yadoms sources'
- git clone --depth=1 -b ${BUILD_BRANCH} git://github.com/Yadoms/yadoms.git 



# Yadoms configuration file
- echo 'Configuring Yadoms CMakeListsUserConfig.txt'
#- cp sources/CMakeListsUserConfig.sample.txt sources/CMakeListsUserConfig.txt 
- echo 'set(BOOST_ROOT "'$PWD'/boost_1_65_1")' > yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(POCO_ROOT "'$PWD'/poco-1.7.9-all")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_ROOT "'$HOME'/depsBuild/protobuf")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_PROTOC_EXECUTABLE "'$HOME'/depsBuild/protobuf/bin/protoc")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PROTOBUF_INSTALLED_TO_CUSTOM_DIRECTORY ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(OPENSSL_ROOT "'$HOME'/depsBuild/openssl")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(DEBUG_WITH_GCC OFF)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_PKGCONFIG ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PYTHON_USE_SOURCES OFF)' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(PYTHON_ROOT "'$PWD'/Python-2.7.13")' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(PYTHON_LIBRARIES "'$PWD'/Python-2.7.13/libpython2.7.so")' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(PYTHON_INCLUDE_DIRS ' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo '       "'$PWD'/Python-2.7.13"' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo '       "'$PWD'/Python-2.7.13/Include")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'set(PostgreSQL_ROOT ' >> yadoms/sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/interfaces/libpq"' >> yadoms/sources/CMakeListsUserConfig.txt
- echo '       "'$PWD'/postgresql-9.6.2/src/include")' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(GAMMU_ROOT "'$PWD'/gammu-1.38.1")' >> yadoms/sources/CMakeListsUserConfig.txt
#- echo 'set(SWIG_ROOT "'$PWD'/swig-3.0.12")' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'SET(COTIRE_USE_UNITY ON)' >> yadoms/sources/CMakeListsUserConfig.txt
- echo 'Result:'
- cat yadoms/sources/CMakeListsUserConfig.txt

# Yadoms
- cd yadoms
- echo 'Generating makefile'
- sh cmake_macosx.sh r
- echo 'Building Yadoms'
- cd projects
- make all_unity
- cd ..

# Make Package => should not be executed if "make all_unity" is done before; 
- cd projects
- echo 'Building Yadoms Package'
- make package
- cd ..

# Make update package
- mkdir updatepackage
- cp update/scripts/update.sh updatepackage/update.sh
- cp ../package.json.in updatepackage/package.json
- sed -i '' -- 's/__version__/'`cat sources/server/changelog.md | head -1 | cut -d ' ' -f 2`'/g' updatepackage/package.json
- sed -i '' -- 's/__gitdate__/'`git log -1 --format=%cI `'/g' updatepackage/package.json
# changelog
- cp sources/server/changelog.md updatepackage/changelog.md
- mv builds/package packagetomove
- mv builds updatepackage/package
- rm -f updatepackage/package/yadoms.ini
- cd updatepackage
- zip -r ../package.zip ./ -x \*.gitignore
- cd ..
- mkdir builds
- mv packagetomove builds/package
- mv package.zip builds/package

after_failure:  # this will of course run only on failure
# Package logs
- echo 'Package logs'
- cd $HOME
- tar cjf lastlogs.tar.bz2 logs
- /usr/local/opt/curl/bin/curl --ftp-create-dirs -T lastlogs.tar.bz2 -k sftp://${FTP_USER}:${FTP_PASSWORD}@${YADOMS_UPLOAD_URL}

after_success: # and this only on success
# Upload packages
- echo 'Upload packages'
- ls builds/package/*
- export SSHPASS=${FTP_PASSWORD}
- sshpass -e sftp -oBatchMode=no -oStrictHostKeyChecking=no -b - ${FTP_USER}@${YADOMS_UPLOAD_URL} <<< $'mput builds/package/*'
